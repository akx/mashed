mx = my = mbx = mby = mb = 0
canvas = document.create-element "canvas"
	&width = 1280
	&height = 720
	&style <<< {width: "100%", height: "100%"}
	ctx = &get-context "2d"
	document.body.append-child &
	&addEventListener "mousedown", !(event) -> mb := 1
	&addEventListener "mouseup", !(event) -> mb := 0
	&addEventListener "mousemove", !(event) ->
		if mb then
			mbx := event.clientX / window.innerWidth
			mby := event.clientY / window.innerHeight
		else
			mx := event.clientX / window.innerWidth
			my := event.clientY / window.innerHeight

if false and (audio = try new webkitAudioContext())
	filter = audio.createBiquadFilter()
		&type = "lowpass"
		&frequency.value = 10000
		&Q.value = 30
		&connect(audio.destination)
	osc = audio.createOscillator()
		&connect(filter)
		&frequency.value = 60
		&start(0)
	glitch = audio.createScriptProcessor(512, 0, 1)
		&onaudioprocess = (event) ->
			buf = event.outputBuffer.getChannelData(0)
			z = 0
			for x from 0 til event.outputBuffer.length
				if rnd(0, 50000) < mx * 500 then
					z += rnd(50, 250)

				if z > 0 then
					z--
					buf[x] = (if rnd(0, 100) < 50 then -1 else +1) / 10.0
				else
					buf[x] = 0
				#if rnd(0, 500) < 1 then
				#	buf[x] = rnd(10, 20) / 100.0
				#else
				#	buf[x] = 0
		&connect(filter)
		#&start(0)





rnd = (a, b) -> 0 | (a + Math.random() * (b - a))



mash = !(data, num) ->
	data = [].slice.apply(data)
	for iter from 0 til num
		i0 = rnd(30, data.length)
		i1 = rnd(30, data.length)
		data[i0] = data[i1]
		#len = 3#0 | ((1 + Math.random() * 3) * 3)
		#start = 0 | (Math.random() * (data.length - 25 - len))
		#source = data.substr(start, len)
		#data = data.substr(0, start) + data.substr(start + len) + source
	return data.join("")

mash-canvas = !->
	jpg = canvas.toDataURL("image/jpeg", 0.1)
	[header, data] = jpg.split(",")
	src = header + "," + mash(data, rnd(2, 5))

	img = document.create-element "img"
		&src = src
		&onload = !->
			ctx.globalAlpha = 0.9
			x = (if rnd(0, 100) < 30 then rnd(-250, +250) else 0)
			y = (if rnd(0, 100) < 30 then rnd(-250, +250) else 0)
			ctx.drawImage img, x, y, canvas.width, canvas.height
			setTimeout redraw, 4#rnd(4, 150)
		&onerror = !-> mash-canvas() # jpeg not fine

redraw = !->
	ctx.globalCompositeOperation = "source-over"
	ctx.globalAlpha = 0.1
	ctx.fillStyle = "purple"
	ctx.fillRect 0, 0, canvas.width, canvas.height
	ctx.globalAlpha = 0.8 * (1 - my)
	
	if audio
		tz = 0#((+new Date()) / 100) % 200
		data = ctx.getImageData(0, 0 | (canvas.height * 0.2), canvas.width, 0 |(canvas.height * 0.2))
		am = []
		ph = []
		partials = 0 | (20 + (my * 40))
		step = 0 | (data.data.length / partials)
		for x from 0 til data.data.length by step
			am.push data.data[x] / 256.0 
			ph.push data.data[x + 1] / 256.0 
		osc.setWaveTable(audio.createWaveTable(new Float32Array(am), new Float32Array(ph)))
		osc.frequency.value = 60 + mx * 10
	
	t = +new Date() * (0.3 + mx * 5)
	for y from 0 til 15
		ctx.fillStyle = <[orange black]>[y&1]
		ctx.fillRect (t * (1 + (y / 10.0 * (if y%3==0 then -1 else +1)))) % canvas.width, 50 + y * 30, 150, 150
	
	mash-canvas()


redraw()